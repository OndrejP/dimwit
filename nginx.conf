
load_module "modules/ngx_http_image_filter_module.so";

user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}



http {

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  #gzip  on;

    map $request_uri $allowUri {
	default       "blackhole";
	~(https?://)[^/]*(pexels.com|fsm.wikidi.com|fbcdn.net|twimg.com|gravatar.com|blogspot.com|zive.cz|gstatic.com|illich.cz)/ "";
    }



  proxy_cache_path /tmp/imgcache levels=1:2 keys_zone=imgcache:60m inactive=90m max_size=1000m;

  server {



    # Uncomment for verbose debugging
    # error_log /var/log/nginx/error.log debug;

    # Uses the Nginx image filter module to dynamically resize and store the resized image on server
    # http://nginx.org/en/docs/http/ngx_http_image_filter_module.html

    # Modified from an original
    # https://gist.github.com/phpdude/1451684

    # Intention is to support most of the commands here:
    # https://github.com/beetlebugorg/mod_dims/wiki/Webservice-API
    # e.g. http://<dims-host>/resize/100x100/http://media.parker.beetlebug.org/archive/2009/03/17/DSC_D300_1872.web.jpg
    listen   80; ## listen for ipv4; this line is default and implied
    server_name _;
    server_tokens off;
    log_subrequest on;
    rewrite_log on;

    # NOTE: this directory needs to have the permissions set to 777 so proxy_store will work correctly
    set $root_path /tmp;
    root $root_path;

    # Needed to allow requested image uri protocol slashes from being merged (used when proxying for source image)
    merge_slashes off;

    # Will proxy to external urls and gets remote images, the following will allow it to resolve properly
    resolver 8.8.8.8;  # Google DNS

    # Allows us to respond to proxy redirects with things like error_page
    proxy_intercept_errors      on;
    proxy_pass_request_body     off;
    proxy_pass_request_headers  off;


    # Hide Amazon Headers
    proxy_hide_header           X-Amz-Id-2;
    proxy_hide_header           X-Amz-Request-Id;

    # Help proxy_cahe with expire time
    proxy_pass_header 		"X-Accel-Expires";

    # Need to also handle HEAD requests
    proxy_method                GET;

    # This is the secret sauce to allow us to handle proxy redirects with image uri's
    recursive_error_pages       on;

    # Sets the maximum size for images during a request
    image_filter_buffer         10M;
    image_filter_jpeg_quality   95;

    location = /favicon.ico {
        log_not_found off;
    }

    # http://nginx.org/en/docs/http/ngx_http_image_filter_module.html#image_filter
    # commands test, rotate, size, crop, resize
    location ~ ^/(resize|crop)/(-|\d+)x(-|\d+)/(.*)$ {
        set $command $1;
        set $arg1 "/$2";
        set $arg2 "/$3";
        set $image_uri "$4$is_args$args";
	set $blackhole $allowUri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    location ~ ^/rotate/(90|180|270)/(.*)$ {
        set $command rotate;
        set $arg1 "/$1";
        set $arg2 '';
        set $image_uri "$2$is_args$args";
	set $blackhole $allowUri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    location ~ ^/size/(.*)$ {
        set $command size;
        set $arg1 '';
        set $arg2 '';
        set $image_uri "$1$is_args$args";
	set $blackhole $allowUri;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    location @process {
        internal;
        add_header Dims-cached no;

	proxy_cache imgcache;
	proxy_cache_key "$scheme$host$request_uri";
	proxy_cache_valid 200 30m;

        # Generate the image if it doesn't exist
	proxy_pass http://local.images.srv.wikidi.net/$blackhole/internal/$command$arg1$arg2/$image_uri;

    }


    # Note: the image_filter directive does not work in the context of anything other than location (i.e. that's why the repetition that follows)
    location ~ ^//internal/resize/(\d+)/(\d+)/(.*)$ {
        allow 127.0.0.0/8;
        deny all;

        set $arg1 $1;
        set $arg2 $2;
        set $image_uri "$3$is_args$args";

        proxy_pass               $image_uri;
        # Handle redirects
        error_page 301 302 307 = @follow_target_redirect;

        # We reset these variables because technically we're in a different request

        # Perform the filter
        image_filter                resize $arg1 $arg2;
    }

    location ~ ^//internal/crop/(\d+)/(\d+)/(.*)$ {
        allow 127.0.0.0/8;
        deny all;

        # We reset these variables because technically we're in a different request
        set $arg1 $1;
        set $arg2 $2;
        set $image_uri "$3$is_args$args";

        proxy_pass                  $image_uri;
        # Handle redirects
        error_page 301 302 307 = @follow_target_redirect;


        # Perform the filter
        image_filter                crop $arg1 $arg2;
    }

    location ~ ^//internal/size/(.*)$ {
        allow 127.0.0.0/8;
        deny all;

        # We reset these variables because technically we're in a different request
        set $image_uri "$1$is_args$args";

        proxy_pass                  $image_uri;
        # Handle redirects
        error_page 301 302 307 = @follow_target_redirect;


        # Perform the filter
        image_filter  size;
    }

    location ~ ^//internal/rotate/(\d+)/(.*)$ {
        allow 127.0.0.0/8;
        deny all;

        # We reset these variables because technically we're in a different request
        set $arg1 $1;
        set $image_uri "$2$is_args$args";

        proxy_pass                  $image_uri;
        # Handle redirects
        error_page 301 302 307 = @follow_target_redirect;


        image_filter                rotate $arg1;
    }

    location @follow_target_redirect {
        internal;
        # Note: we are not reusing the @process named location since we don't want to save two copies on disk
        # Set the Location header for a redirect to a the image uri (further proxying will reset it)
        set $image_uri $upstream_http_location;

        # This is intended to be the exact url that's also in the @process named location
	proxy_pass http://local.images.srv.wikidi.net/internal/$command/$arg1$arg2/$image_uri;
    }


  }
}